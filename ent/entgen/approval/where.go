// Code generated by ent, DO NOT EDIT.

package approval

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shunwuse/go-hris/ent/entgen/predicate"
	"github.com/shunwuse/go-hris/internal/constants"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Approval {
	return predicate.Approval(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Approval {
	return predicate.Approval(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Approval {
	return predicate.Approval(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Approval {
	return predicate.Approval(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Approval {
	return predicate.Approval(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Approval {
	return predicate.Approval(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Approval {
	return predicate.Approval(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldDeletedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v constants.ApprovalStatus) predicate.Approval {
	vc := string(v)
	return predicate.Approval(sql.FieldEQ(FieldStatus, vc))
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v uint) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldCreatorID, v))
}

// ApproverID applies equality check predicate on the "approver_id" field. It's identical to ApproverIDEQ.
func ApproverID(v uint) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldApproverID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Approval {
	return predicate.Approval(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Approval {
	return predicate.Approval(sql.FieldNotNull(FieldDeletedAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v constants.ApprovalStatus) predicate.Approval {
	vc := string(v)
	return predicate.Approval(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v constants.ApprovalStatus) predicate.Approval {
	vc := string(v)
	return predicate.Approval(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...constants.ApprovalStatus) predicate.Approval {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Approval(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...constants.ApprovalStatus) predicate.Approval {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Approval(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v constants.ApprovalStatus) predicate.Approval {
	vc := string(v)
	return predicate.Approval(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v constants.ApprovalStatus) predicate.Approval {
	vc := string(v)
	return predicate.Approval(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v constants.ApprovalStatus) predicate.Approval {
	vc := string(v)
	return predicate.Approval(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v constants.ApprovalStatus) predicate.Approval {
	vc := string(v)
	return predicate.Approval(sql.FieldLTE(FieldStatus, vc))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v constants.ApprovalStatus) predicate.Approval {
	vc := string(v)
	return predicate.Approval(sql.FieldContains(FieldStatus, vc))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v constants.ApprovalStatus) predicate.Approval {
	vc := string(v)
	return predicate.Approval(sql.FieldHasPrefix(FieldStatus, vc))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v constants.ApprovalStatus) predicate.Approval {
	vc := string(v)
	return predicate.Approval(sql.FieldHasSuffix(FieldStatus, vc))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v constants.ApprovalStatus) predicate.Approval {
	vc := string(v)
	return predicate.Approval(sql.FieldEqualFold(FieldStatus, vc))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v constants.ApprovalStatus) predicate.Approval {
	vc := string(v)
	return predicate.Approval(sql.FieldContainsFold(FieldStatus, vc))
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v uint) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldCreatorID, v))
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v uint) predicate.Approval {
	return predicate.Approval(sql.FieldNEQ(FieldCreatorID, v))
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...uint) predicate.Approval {
	return predicate.Approval(sql.FieldIn(FieldCreatorID, vs...))
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...uint) predicate.Approval {
	return predicate.Approval(sql.FieldNotIn(FieldCreatorID, vs...))
}

// ApproverIDEQ applies the EQ predicate on the "approver_id" field.
func ApproverIDEQ(v uint) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldApproverID, v))
}

// ApproverIDNEQ applies the NEQ predicate on the "approver_id" field.
func ApproverIDNEQ(v uint) predicate.Approval {
	return predicate.Approval(sql.FieldNEQ(FieldApproverID, v))
}

// ApproverIDIn applies the In predicate on the "approver_id" field.
func ApproverIDIn(vs ...uint) predicate.Approval {
	return predicate.Approval(sql.FieldIn(FieldApproverID, vs...))
}

// ApproverIDNotIn applies the NotIn predicate on the "approver_id" field.
func ApproverIDNotIn(vs ...uint) predicate.Approval {
	return predicate.Approval(sql.FieldNotIn(FieldApproverID, vs...))
}

// ApproverIDIsNil applies the IsNil predicate on the "approver_id" field.
func ApproverIDIsNil() predicate.Approval {
	return predicate.Approval(sql.FieldIsNull(FieldApproverID))
}

// ApproverIDNotNil applies the NotNil predicate on the "approver_id" field.
func ApproverIDNotNil() predicate.Approval {
	return predicate.Approval(sql.FieldNotNull(FieldApproverID))
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.User) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApprover applies the HasEdge predicate on the "approver" edge.
func HasApprover() predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ApproverTable, ApproverColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApproverWith applies the HasEdge predicate on the "approver" edge with a given conditions (other predicates).
func HasApproverWith(preds ...predicate.User) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		step := newApproverStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Approval) predicate.Approval {
	return predicate.Approval(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Approval) predicate.Approval {
	return predicate.Approval(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Approval) predicate.Approval {
	return predicate.Approval(sql.NotPredicates(p))
}
