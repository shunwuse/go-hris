// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shunwuse/go-hris/ent/entgen/password"
	"github.com/shunwuse/go-hris/ent/entgen/predicate"
	"github.com/shunwuse/go-hris/ent/entgen/user"
)

// PasswordUpdate is the builder for updating Password entities.
type PasswordUpdate struct {
	config
	hooks    []Hook
	mutation *PasswordMutation
}

// Where appends a list predicates to the PasswordUpdate builder.
func (_u *PasswordUpdate) Where(ps ...predicate.Password) *PasswordUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PasswordUpdate) SetUpdatedAt(v time.Time) *PasswordUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PasswordUpdate) SetDeletedAt(v time.Time) *PasswordUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PasswordUpdate) SetNillableDeletedAt(v *time.Time) *PasswordUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PasswordUpdate) ClearDeletedAt() *PasswordUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *PasswordUpdate) SetUserID(v uint) *PasswordUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *PasswordUpdate) SetNillableUserID(v *uint) *PasswordUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetHash sets the "hash" field.
func (_u *PasswordUpdate) SetHash(v string) *PasswordUpdate {
	_u.mutation.SetHash(v)
	return _u
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (_u *PasswordUpdate) SetNillableHash(v *string) *PasswordUpdate {
	if v != nil {
		_u.SetHash(*v)
	}
	return _u
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_u *PasswordUpdate) SetOwnerID(id uint) *PasswordUpdate {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *PasswordUpdate) SetOwner(v *User) *PasswordUpdate {
	return _u.SetOwnerID(v.ID)
}

// Mutation returns the PasswordMutation object of the builder.
func (_u *PasswordUpdate) Mutation() *PasswordMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *PasswordUpdate) ClearOwner() *PasswordUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PasswordUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PasswordUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PasswordUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PasswordUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PasswordUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := password.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PasswordUpdate) check() error {
	if v, ok := _u.mutation.UserID(); ok {
		if err := password.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`entgen: validator failed for field "Password.user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Hash(); ok {
		if err := password.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`entgen: validator failed for field "Password.hash": %w`, err)}
		}
	}
	if _u.mutation.OwnerCleared() && len(_u.mutation.OwnerIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "Password.owner"`)
	}
	return nil
}

func (_u *PasswordUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(password.Table, password.Columns, sqlgraph.NewFieldSpec(password.FieldID, field.TypeUint))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(password.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(password.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(password.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Hash(); ok {
		_spec.SetField(password.FieldHash, field.TypeString, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   password.OwnerTable,
			Columns: []string{password.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   password.OwnerTable,
			Columns: []string{password.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{password.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PasswordUpdateOne is the builder for updating a single Password entity.
type PasswordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PasswordMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PasswordUpdateOne) SetUpdatedAt(v time.Time) *PasswordUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PasswordUpdateOne) SetDeletedAt(v time.Time) *PasswordUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PasswordUpdateOne) SetNillableDeletedAt(v *time.Time) *PasswordUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PasswordUpdateOne) ClearDeletedAt() *PasswordUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *PasswordUpdateOne) SetUserID(v uint) *PasswordUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *PasswordUpdateOne) SetNillableUserID(v *uint) *PasswordUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetHash sets the "hash" field.
func (_u *PasswordUpdateOne) SetHash(v string) *PasswordUpdateOne {
	_u.mutation.SetHash(v)
	return _u
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (_u *PasswordUpdateOne) SetNillableHash(v *string) *PasswordUpdateOne {
	if v != nil {
		_u.SetHash(*v)
	}
	return _u
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_u *PasswordUpdateOne) SetOwnerID(id uint) *PasswordUpdateOne {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *PasswordUpdateOne) SetOwner(v *User) *PasswordUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// Mutation returns the PasswordMutation object of the builder.
func (_u *PasswordUpdateOne) Mutation() *PasswordMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *PasswordUpdateOne) ClearOwner() *PasswordUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// Where appends a list predicates to the PasswordUpdate builder.
func (_u *PasswordUpdateOne) Where(ps ...predicate.Password) *PasswordUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PasswordUpdateOne) Select(field string, fields ...string) *PasswordUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Password entity.
func (_u *PasswordUpdateOne) Save(ctx context.Context) (*Password, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PasswordUpdateOne) SaveX(ctx context.Context) *Password {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PasswordUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PasswordUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PasswordUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := password.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PasswordUpdateOne) check() error {
	if v, ok := _u.mutation.UserID(); ok {
		if err := password.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`entgen: validator failed for field "Password.user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Hash(); ok {
		if err := password.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`entgen: validator failed for field "Password.hash": %w`, err)}
		}
	}
	if _u.mutation.OwnerCleared() && len(_u.mutation.OwnerIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "Password.owner"`)
	}
	return nil
}

func (_u *PasswordUpdateOne) sqlSave(ctx context.Context) (_node *Password, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(password.Table, password.Columns, sqlgraph.NewFieldSpec(password.FieldID, field.TypeUint))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "Password.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, password.FieldID)
		for _, f := range fields {
			if !password.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != password.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(password.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(password.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(password.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Hash(); ok {
		_spec.SetField(password.FieldHash, field.TypeString, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   password.OwnerTable,
			Columns: []string{password.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   password.OwnerTable,
			Columns: []string{password.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Password{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{password.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
