// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shunwuse/go-hris/constants"
	"github.com/shunwuse/go-hris/ent/entgen/approval"
	"github.com/shunwuse/go-hris/ent/entgen/user"
)

// Approval is the model entity for the Approval schema.
type Approval struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Status holds the value of the "status" field.
	Status constants.ApprovalStatus `json:"status,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID uint `json:"creator_id,omitempty"`
	// ApproverID holds the value of the "approver_id" field.
	ApproverID *uint `json:"approver_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApprovalQuery when eager-loading is set.
	Edges        ApprovalEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ApprovalEdges holds the relations/edges for other nodes in the graph.
type ApprovalEdges struct {
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// Approver holds the value of the approver edge.
	Approver *User `json:"approver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApprovalEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// ApproverOrErr returns the Approver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApprovalEdges) ApproverOrErr() (*User, error) {
	if e.Approver != nil {
		return e.Approver, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "approver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Approval) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case approval.FieldID, approval.FieldCreatorID, approval.FieldApproverID:
			values[i] = new(sql.NullInt64)
		case approval.FieldStatus:
			values[i] = new(sql.NullString)
		case approval.FieldCreatedAt, approval.FieldUpdatedAt, approval.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Approval fields.
func (_m *Approval) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case approval.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint(value.Int64)
		case approval.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case approval.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case approval.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case approval.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = constants.ApprovalStatus(value.String)
			}
		case approval.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				_m.CreatorID = uint(value.Int64)
			}
		case approval.FieldApproverID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field approver_id", values[i])
			} else if value.Valid {
				_m.ApproverID = new(uint)
				*_m.ApproverID = uint(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Approval.
// This includes values selected through modifiers, order, etc.
func (_m *Approval) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Approval entity.
func (_m *Approval) QueryCreator() *UserQuery {
	return NewApprovalClient(_m.config).QueryCreator(_m)
}

// QueryApprover queries the "approver" edge of the Approval entity.
func (_m *Approval) QueryApprover() *UserQuery {
	return NewApprovalClient(_m.config).QueryApprover(_m)
}

// Update returns a builder for updating this Approval.
// Note that you need to call Approval.Unwrap() before calling this method if this Approval
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Approval) Update() *ApprovalUpdateOne {
	return NewApprovalClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Approval entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Approval) Unwrap() *Approval {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("entgen: Approval is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Approval) String() string {
	var builder strings.Builder
	builder.WriteString("Approval(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CreatorID))
	builder.WriteString(", ")
	if v := _m.ApproverID; v != nil {
		builder.WriteString("approver_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Approvals is a parsable slice of Approval.
type Approvals []*Approval
