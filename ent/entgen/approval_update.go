// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shunwuse/go-hris/constants"
	"github.com/shunwuse/go-hris/ent/entgen/approval"
	"github.com/shunwuse/go-hris/ent/entgen/predicate"
	"github.com/shunwuse/go-hris/ent/entgen/user"
)

// ApprovalUpdate is the builder for updating Approval entities.
type ApprovalUpdate struct {
	config
	hooks    []Hook
	mutation *ApprovalMutation
}

// Where appends a list predicates to the ApprovalUpdate builder.
func (_u *ApprovalUpdate) Where(ps ...predicate.Approval) *ApprovalUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ApprovalUpdate) SetUpdatedAt(v time.Time) *ApprovalUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ApprovalUpdate) SetDeletedAt(v time.Time) *ApprovalUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ApprovalUpdate) SetNillableDeletedAt(v *time.Time) *ApprovalUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ApprovalUpdate) ClearDeletedAt() *ApprovalUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ApprovalUpdate) SetStatus(v constants.ApprovalStatus) *ApprovalUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ApprovalUpdate) SetNillableStatus(v *constants.ApprovalStatus) *ApprovalUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetCreatorID sets the "creator_id" field.
func (_u *ApprovalUpdate) SetCreatorID(v uint) *ApprovalUpdate {
	_u.mutation.SetCreatorID(v)
	return _u
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (_u *ApprovalUpdate) SetNillableCreatorID(v *uint) *ApprovalUpdate {
	if v != nil {
		_u.SetCreatorID(*v)
	}
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *ApprovalUpdate) SetApproverID(v uint) *ApprovalUpdate {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *ApprovalUpdate) SetNillableApproverID(v *uint) *ApprovalUpdate {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *ApprovalUpdate) ClearApproverID() *ApprovalUpdate {
	_u.mutation.ClearApproverID()
	return _u
}

// SetCreator sets the "creator" edge to the User entity.
func (_u *ApprovalUpdate) SetCreator(v *User) *ApprovalUpdate {
	return _u.SetCreatorID(v.ID)
}

// SetApprover sets the "approver" edge to the User entity.
func (_u *ApprovalUpdate) SetApprover(v *User) *ApprovalUpdate {
	return _u.SetApproverID(v.ID)
}

// Mutation returns the ApprovalMutation object of the builder.
func (_u *ApprovalUpdate) Mutation() *ApprovalMutation {
	return _u.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (_u *ApprovalUpdate) ClearCreator() *ApprovalUpdate {
	_u.mutation.ClearCreator()
	return _u
}

// ClearApprover clears the "approver" edge to the User entity.
func (_u *ApprovalUpdate) ClearApprover() *ApprovalUpdate {
	_u.mutation.ClearApprover()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ApprovalUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ApprovalUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ApprovalUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ApprovalUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ApprovalUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := approval.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ApprovalUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := approval.StatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entgen: validator failed for field "Approval.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CreatorID(); ok {
		if err := approval.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`entgen: validator failed for field "Approval.creator_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ApproverID(); ok {
		if err := approval.ApproverIDValidator(v); err != nil {
			return &ValidationError{Name: "approver_id", err: fmt.Errorf(`entgen: validator failed for field "Approval.approver_id": %w`, err)}
		}
	}
	if _u.mutation.CreatorCleared() && len(_u.mutation.CreatorIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "Approval.creator"`)
	}
	return nil
}

func (_u *ApprovalUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(approval.Table, approval.Columns, sqlgraph.NewFieldSpec(approval.FieldID, field.TypeUint))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(approval.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(approval.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(approval.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(approval.FieldStatus, field.TypeString, value)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approval.CreatorTable,
			Columns: []string{approval.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approval.CreatorTable,
			Columns: []string{approval.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approval.ApproverTable,
			Columns: []string{approval.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approval.ApproverTable,
			Columns: []string{approval.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approval.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ApprovalUpdateOne is the builder for updating a single Approval entity.
type ApprovalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApprovalMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ApprovalUpdateOne) SetUpdatedAt(v time.Time) *ApprovalUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ApprovalUpdateOne) SetDeletedAt(v time.Time) *ApprovalUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ApprovalUpdateOne) SetNillableDeletedAt(v *time.Time) *ApprovalUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ApprovalUpdateOne) ClearDeletedAt() *ApprovalUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ApprovalUpdateOne) SetStatus(v constants.ApprovalStatus) *ApprovalUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ApprovalUpdateOne) SetNillableStatus(v *constants.ApprovalStatus) *ApprovalUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetCreatorID sets the "creator_id" field.
func (_u *ApprovalUpdateOne) SetCreatorID(v uint) *ApprovalUpdateOne {
	_u.mutation.SetCreatorID(v)
	return _u
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (_u *ApprovalUpdateOne) SetNillableCreatorID(v *uint) *ApprovalUpdateOne {
	if v != nil {
		_u.SetCreatorID(*v)
	}
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *ApprovalUpdateOne) SetApproverID(v uint) *ApprovalUpdateOne {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *ApprovalUpdateOne) SetNillableApproverID(v *uint) *ApprovalUpdateOne {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *ApprovalUpdateOne) ClearApproverID() *ApprovalUpdateOne {
	_u.mutation.ClearApproverID()
	return _u
}

// SetCreator sets the "creator" edge to the User entity.
func (_u *ApprovalUpdateOne) SetCreator(v *User) *ApprovalUpdateOne {
	return _u.SetCreatorID(v.ID)
}

// SetApprover sets the "approver" edge to the User entity.
func (_u *ApprovalUpdateOne) SetApprover(v *User) *ApprovalUpdateOne {
	return _u.SetApproverID(v.ID)
}

// Mutation returns the ApprovalMutation object of the builder.
func (_u *ApprovalUpdateOne) Mutation() *ApprovalMutation {
	return _u.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (_u *ApprovalUpdateOne) ClearCreator() *ApprovalUpdateOne {
	_u.mutation.ClearCreator()
	return _u
}

// ClearApprover clears the "approver" edge to the User entity.
func (_u *ApprovalUpdateOne) ClearApprover() *ApprovalUpdateOne {
	_u.mutation.ClearApprover()
	return _u
}

// Where appends a list predicates to the ApprovalUpdate builder.
func (_u *ApprovalUpdateOne) Where(ps ...predicate.Approval) *ApprovalUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ApprovalUpdateOne) Select(field string, fields ...string) *ApprovalUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Approval entity.
func (_u *ApprovalUpdateOne) Save(ctx context.Context) (*Approval, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ApprovalUpdateOne) SaveX(ctx context.Context) *Approval {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ApprovalUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ApprovalUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ApprovalUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := approval.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ApprovalUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := approval.StatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entgen: validator failed for field "Approval.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CreatorID(); ok {
		if err := approval.CreatorIDValidator(v); err != nil {
			return &ValidationError{Name: "creator_id", err: fmt.Errorf(`entgen: validator failed for field "Approval.creator_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ApproverID(); ok {
		if err := approval.ApproverIDValidator(v); err != nil {
			return &ValidationError{Name: "approver_id", err: fmt.Errorf(`entgen: validator failed for field "Approval.approver_id": %w`, err)}
		}
	}
	if _u.mutation.CreatorCleared() && len(_u.mutation.CreatorIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "Approval.creator"`)
	}
	return nil
}

func (_u *ApprovalUpdateOne) sqlSave(ctx context.Context) (_node *Approval, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(approval.Table, approval.Columns, sqlgraph.NewFieldSpec(approval.FieldID, field.TypeUint))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "Approval.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, approval.FieldID)
		for _, f := range fields {
			if !approval.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != approval.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(approval.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(approval.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(approval.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(approval.FieldStatus, field.TypeString, value)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approval.CreatorTable,
			Columns: []string{approval.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approval.CreatorTable,
			Columns: []string{approval.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approval.ApproverTable,
			Columns: []string{approval.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approval.ApproverTable,
			Columns: []string{approval.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Approval{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approval.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
